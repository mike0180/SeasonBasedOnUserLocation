{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","Summer","text","iconName","Winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"8MAEMA,EAAe,CACnBC,OAAQ,CACNC,KAAM,eACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,eACNC,SAAU,cAwBCE,EAZO,SAACC,GACrB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIC,EAEJP,EAAaS,GAAhCP,EAFuB,EAEvBA,KAAMC,EAFiB,EAEjBA,SACd,OACE,sBAAKS,UAAS,yBAAoBH,GAAlC,UACE,mBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,6BAAKD,IACL,mBAAGU,UAAS,6BAAwBT,EAAxB,eC5BZU,EAAU,SAACP,GACf,OACE,qBAAKM,UAAU,mBAAf,SACE,qBAAKA,UAAU,iBAAf,SAAiCN,EAAMQ,aAK7CD,EAAQE,aAAe,CACrBD,QAAS,cAEID,QCNTG,E,4MAKJC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,uDACnC,WAAqB,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,oBAI/C,WACE,OAAIc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAClC,yCAAYqB,KAAKX,MAAMC,iBAE3BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAClC,cAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAGjC,cAAC,EAAD,CAASO,QAAQ,uC,GArBVe,IAAMC,WAyBxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.a5fba0ab.chunk.js","sourcesContent":["import \"./SeasonDisplay.css\";\r\nimport React from \"react\";\r\nconst seasonConfig = {\r\n  Summer: {\r\n    text: \"It's Summer!\",\r\n    iconName: \"sun\",\r\n  },\r\n  Winter: {\r\n    text: \"It's Winter!\",\r\n    iconName: \"snowflake\",\r\n  },\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? \"Summer\" : \"Winter\";\r\n  } else {\r\n    return lat > 0 ? \"Winter\" : \"Summer\";\r\n  }\r\n};\r\n\r\nconst SeasonDisplay = (props) => {\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n  const { text, iconName } = seasonConfig[season];\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={`icon-left massive ${iconName} icon`} />\r\n      <h1>{text}</h1>\r\n      <i className={`icon-right massive ${iconName} icon`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","const Spinner = (props) => {\r\n  return (\r\n    <div className=\"ui active dimmer\">\r\n      <div className=\"ui text loader\">{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n  message: \"Loading...\",\r\n};\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\nimport Spinner from \"./Spinner.js\";\r\n\r\nclass App extends React.Component {\r\n  //   constructor(props) {\r\n  //     super(props);\r\n  //     this.state = { lat: null, errorMessage: \"\" };\r\n  //   }\r\n  state = { lat: null, errorMessage: \"\" };\r\n  componentDidMount() {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      (position) => this.setState({ lat: position.coords.latitude }),\r\n      (err) => this.setState({ errorMessage: err.message })\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.errorMessage && !this.state.lat) {\r\n      return <div>Error:{this.state.errorMessage}</div>;\r\n    }\r\n    if (!this.state.errorMessage && this.state.lat) {\r\n      return <SeasonDisplay lat={this.state.lat} />;\r\n    }\r\n\r\n    return <Spinner message=\"Please accept location request\" />;\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}